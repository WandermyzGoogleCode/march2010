<?php

if(!defined('IN_LIVES_CUBE'))
{
	exit("Access Denied");
}

/**
 * MySQL Improved Extension封装，要求PHP加载MySQL Improved Extension，MySQL版本4.1以上
 * @author Wander
 *
 */
class MySqlImproved
{
	/**
	 * 新建一个mysql连接
	 * @param $dbhost 数据库服务地址和端口号，通常设置为localhost，或者localhost:3306
	 * @param $dbuser 数据库用户名
	 * @param $dbpw 数据库密码
	 * @param $dbname 所使用的数据库名，如果不设置则不选择数据库，必须以后使用select_db函数指定数据库
	 * @return 数据库标识符
	 */
	function MySqlI($dbhost, $dbuser, $dbpw, $dbname = "")
	{

	}

	/**
	 * 选择数据库
	 * @param $dbname 数据库名
	 */
	function select_db($dbname)
	{

	}

	/**
	 * 关闭MySQL连接
	 */
	function close()
	{

	}
	
	/**
	 * 发送查询语句。支持MySQL参数化查询。
	 * @param $query 查询语句
	 * @param $types 参数化查询的各参数类型，每个参数类型用一个字符表示：i = integer, d = double, s = string. b = blob(corresponding variable is a blob and will be sent in packets, 见手册 mysqli-stmt.bind-param)
	 * @param $params 参数化查询的各参数值
	 * @example 
	 * 		$db->query("insert into users values(?, ?, ?, ?)", "isi", array(1,'Wander',21));
	 */
	function query($query, $types = '', $params = array())
	{
		
	}
	
	/**
	 * 将下一条数据行存入数组中，数组下标为数据表的字段名
	 * @param $result 使用query()等函数得到的查询结果
	 * @return 数组，数组下标为数据表的字段名
	 * @example
	 * 		$query = $db->query("select index, entry from open_table");
	 * 		while($row = $db->fetch_array($query))
	 * 		{
	 * 			ecco "index = $row['index'], entry = $row['entry']\n";
	 * 		}
	 */
	function fetch_assoc($result)
	{

	}
	
	/**
	 * 将下一条数据行存入数组中，数组下标为数据表的字段索引号
	 * @param $result 使用query()等函数得到的查询结果
	 * @return 数组，数组下标为数据表的字段索引号
	 */
	function fetch_row($result)
	{
		
	}

	/**
	 * 将所有数据行存入二维数组中。注意：此函数效率较低，建议使用fetch_array()
	 * @param $query 使用query()等函数得到的查询结果
	 * @param $result_type 返回的数组格式。MYSQLI_ASSOC表示以字段名为下标，MYSQLI_NUM表示以字段索引号为下标，MYSQLI_BOTH表示已字段名或字段索引号均可访问该字段
	 * @return 二维数组，第一维以数字为下标，表示查询结果的行索引；第二维格式依result_type而定       
	 */
	function fetch_all_array($result, $result_type)
	{

	}

	/**
	 * 将$data中的数据插入到名为$dbname的数据表中，返回新增记录的id号（若存在）
	 * @param $dbname 数据表名
	 * @param $data 数组，其下标为数据表字段名，值为该字段对应的数据
	 * @return 新增记录的id号（若存在）(returns the ID generated by a query on a table with a column having the AUTO_INCREMENT attribute.)
	 * @example
	 * 	insert_array('users', array(
	 * 		'id' => 1,
	 * 		'name' => 'Wander',
	 *      'age' => 21
	 *      )
	 *  );
	 */
	function insert_array($dbname, $data)
	{
		
	}

	/**
	 * 用$data中的数据更新名为$dbname的数据表中所有满足$condition条件的记录，返回受影响的行数
	 * @param $dbname 数据表名
	 * @param $data 数组，其下标为数据表字段名，值为该字段对应的数据
	 * @param $condition 查询条件，即SQL语句中“where”的内容。留空则表示更新所有记录
	 * @return 受影响的行数
	 */
	function update_array($dbname, $data, $condition = '')
	{
		
	}
	
	/**
	 * 获得上一次操作影响的行数
	 */
	function affected_rows() 
	{
		
	}
	
	/**
	 * 获得上一次查询时自动生成的记录id号
	 * 见手册mysqli.insert-id
	 */
	function insert_id() 
	{
		
	}
	
	/**
	 * 返回上一次查询时的错误信息
	 */
	function error()
	{
		
	}
	
	/**
	 * 返回上一次查询时的错误号
	 */
	function errno()
	{
		
	}
	
	/**
	 * 返回$result中所含的记录行数
	 * @param $result
	 */
	function num_rows($result)
	{
		
	}	
	
	/**
	 * 返回MySQL数据库的版本号
	 */
	function version()
	{
		
	}
}
?>