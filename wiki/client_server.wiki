#summary 手机客户端与服务器端的功能需求.
#labels Type-Assignment,Phase-Requirements

<wiki:toc max_depth="3" />

= 手机客户端 =
== 主界面 ==
 * 列表显示所有联系人的“名字”，“状态”缩略。［是否做到动态加载，否则一次加载几百个人可能有些慢］
 * 能够通过直接按键（不开输入法）通过拼音搜索并在列表中跳转到联系人。［有没有搜索的API？对于状态搜索？］
 * 按确认键直接进入原系统的联系人详细信息。
 * 按拨号键直接调用原系统拨打电话。
 * 按删除键调用原系统删除联系人功能。
 * 左软键（菜单键）呼出功能菜单。
 * 右软键（取消键）退出界面。
 * 显示一个状态栏，包含一个月内使用的流量统计，以及目前系统正在干什么（搜索，更新，空闲等等）
 * 显示一个TIP栏，滚动播放一些小TIP，或者是服务器广播的信息（为以后做准备，总得有个信息发布的地方）

== 功能菜单 ==
 # 最新状态。即立刻获取该联系人的最新状态。
 # 个人设置。设置和更新自己的名称和状态。
 # 偏好设置。设置如何获取同步信息，显示同步名称还是原有名称。
 # 新建联系人。直接调用系统API。
 # 删除联系人。直接调用系统API。
 # 系统通讯录。直接调用系统API。

== 最新状态界面 ==
 * 同时显示该联系人的同步名称和最新状态。
 * 有个提示栏，显示：“正在获取最新状态，目前显示的状态发布时间XXX”或者“最新状态获取完毕，本条状态发布时间XXX”
 * 确认键、拨号键、删除键和主界面功能一直，右软键退出到主界面，左软键重新刷新最新状态，菜单键显示前面提到的5个按键的功能。

== 个人设置界面 ==
 * 显示基本和最新状态界面一直，只是名称和状态栏变为可以修改。
 * 确认键提交修改，右软件退出到主界面，左软件刷新最新状态，菜单键显示前面提到的3个按键的功能。
 * 同样有个提示栏，显示：
  ＊ “正在提交状态”
  ＊ “状态提交完毕，提交时间XXX”
  ＊ “空闲，目前显示状态的发布时间为XXX”
  ＊ “正在获取您在服务器上的最新状态”（考虑到一个人可能会换客户端或者手机）

== 偏好设置界面 ==
 * 第一项，选择显示同步名称或者原有名称。
 * 第二项，选择自动更新的时间长度（以1小时为单位，可以设置为不自动更新）
  在选择时间的时候，大致给一个使用流量和更新时间的提示介绍。
 * 确认键提交修改，右软件退出到主界面，左软件恢复到初始设置，菜单键显示前面提到的3个按键的功能。

= 服务器端 =
== 客户端与服务器端接口 ==
以下不考虑加密的问题。
 * 客户端发来一个{{{[EncryptedPhoneNumber, UserEntry]}}}要求进行注册。服务器返回成功与否，成功的话返回当注册成功的服务器时间，否则返回0。失败的可能原因该手机号码已经存在。（如果用户觉得自己的手机号被抢注了，可以申诉，其它没办法了，因为短信验证就要求服务器知道手机号码了）
 * 客户端发来一个{{{[EncryptedPhoneNumber, UserEntry]}}}进行信息更新，该更新包含关系和信息的更新。服务器返回成功与否，成功的话返回当注册成功的服务器时间，否则返回0。失败的可能原因是该手机号码不存在，或者无法通过身份确认（检查用户是否用私钥对UserEntry做了一个签名）。
 * 客户端发来一个{{{[EncryptedPhoneNumber, UpdateRequest]}}}，回给客户端一个UpdatePackage，包含有增量更新的内容。可能还包含一些多余的错误信息，比如权限不对，有多少已经是最新的所以没有update等等。不过这些信息现在还没有加到UpdatePackage的定义当中去。反正这个东西不归硬件管，慢慢来。

== obsolete ==
 所有功能分为三类：关系表维护操作，个人信息提交操作，用户信息获取操作。但是一旦考虑到用户可能用多个终端，并且我们的系统要保持时间增量操作，还要保持良好的同步性，于是就感觉有很多问题，比如：
  * 用户手机通讯录中的某个联系人突然加入我们系统了，我们怎么处理？
  * 用户用了一会这个手机，然后突然又换了一个手机，通讯录全变了。
  * 用户手动更新了单个联系人的信息，因此各个联系人的更新时间是不一样的。
  * 用户批量更新可能很不情愿，那么大批量的关系变化，层次不齐的信息更新时间，等等等等，怎么办呢？
 现在觉得这里的问题真多，因为扯上了同步……看来这里需要集体的智慧了。